load(default_post)

# Recompute SDK version in case the user set it explicitly
sdk_version = $$QMAKE_MAC_SDK_VERSION
QMAKE_MAC_SDK_VERSION = $$xcodeSDKInfo(SDKVersion)

contains(TEMPLATE, .*app) {
    !macx-xcode:if(isEmpty(BUILDS)|build_pass) {
        # Detect changes to the platform SDK
        QMAKE_EXTRA_VARIABLES += QMAKE_MAC_SDK QMAKE_MAC_SDK_VERSION QMAKE_XCODE_DEVELOPER_PATH
        QMAKE_EXTRA_INCLUDES += $$shell_quote($$PWD/sdk.mk)
    }

    # Detect incompatible SDK versions

    isEmpty(QT_MAC_SDK_VERSION_MIN): \
        QT_MAC_SDK_VERSION_MIN = $$QT_MAC_SDK_VERSION

    !versionAtLeast(QMAKE_MAC_SDK_VERSION, $$QT_MAC_SDK_VERSION_MIN): \
        warning("Qt requires at least version $$QT_MAC_SDK_VERSION_MIN of the platform SDK," \
              "you're building against version $${QMAKE_MAC_SDK_VERSION}. Please upgrade.")

    !isEmpty(QT_MAC_SDK_VERSION_MAX) {
        # For Qt developers only
        !isEmpty($$list($$(QT_MAC_SDK_NO_VERSION_CHECK))): \
            CONFIG += sdk_no_version_check

        QMAKE_MAC_SDK_MAJOR_MINOR_VERSION = $$replace(QMAKE_MAC_SDK_VERSION, "(\\d+)(\\.\\d+)(\\.\\d+)?", \\1\\2)

        !sdk_no_version_check:!versionAtMost(QMAKE_MAC_SDK_MAJOR_MINOR_VERSION, $$QT_MAC_SDK_VERSION_MAX) {
            warning("Qt has only been tested with version $$QT_MAC_SDK_VERSION_MAX"\
                    "of the platform SDK, you're using $${QMAKE_MAC_SDK_MAJOR_MINOR_VERSION}.")
            warning("This is an unsupported configuration. You may experience build issues," \
                    "and by using")
            warning("the $$QMAKE_MAC_SDK_VERSION SDK you are opting in to new features" \
                    "that Qt has not been prepared for.")

            warning("Please downgrade the SDK you use to build your app to version" \
                    "$$QT_MAC_SDK_VERSION_MAX, or configure")
            warning("with CONFIG+=sdk_no_version_check when running qmake" \
                    "to silence this warning.")
        }
    }
}

!no_objective_c:CONFIG += objective_c

qt {
    qtConfig(static) {
        # C++11 support means using libc++ instead of libstd++. As the
        # two libraries are incompatible we need to ensure the end user
        # project is built using the same C++11 support/no support as Qt.
        qtConfig(c++11) {
            CONFIG += c++11
        } else: c++11 {
            warning("Qt was not built with C++11 enabled, disabling feature")
            CONFIG -= c++11
        }

        !c++11 {
            # Explicitly use libstdc++ if C++11 support is not enabled,
            # as otherwise the compiler will choose the standard library
            # based on the deployment target, which for iOS 7 and OS X 10.9
            # is libc++, and we can't mix and match the two.
            QMAKE_CXXFLAGS += -stdlib=libstdc++
            QMAKE_LFLAGS   += -stdlib=libstdc++
        }
    }
}

!macx-xcode {
    generate_xcode_project.commands = @$(QMAKE) -spec macx-xcode \"$(EXPORT__PRO_FILE_)\" $$QMAKE_ARGS
    generate_xcode_project.target = xcodeproj
    QMAKE_EXTRA_VARIABLES += _PRO_FILE_
    QMAKE_EXTRA_TARGETS += generate_xcode_project
}
